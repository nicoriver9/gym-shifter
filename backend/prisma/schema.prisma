// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id         Int      @id @default(autoincrement())
  name       String
  email      String?  @unique
  phone      String?
  created_at DateTime @default(now())

  classes ClassSchedule[] @relation("TeacherClasses") // Sin onDelete aquí
}

model ClassType {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  schedules   ClassSchedule[] // Relación con los horarios
}

model ClassSchedule {
  id            Int       @id @default(autoincrement())
  class_type_id Int
  classType     ClassType @relation(fields: [class_type_id], references: [id])
  teacher_id    Int?
  teacher       Teacher?  @relation("TeacherClasses", fields: [teacher_id], references: [id], onDelete: Cascade) // onDelete aquí
  day_of_week   Int
  start_time    String
  end_time      String
  room          String?
  created_at    DateTime  @default(now())

  Reservation Reservation[]
}

model Pack {
  id                Int       @id @default(autoincrement())
  name              String
  classes_included  Int // Número de clases que incluye el pack
  price             Float // Precio en pesos argentinos
  validity_days     Int // Tiempo de validez en días
  unlimited_classes Boolean   @default(false) // Indica si el pack es ilimitado
  created_at        DateTime  @default(now())
  isDeleted         Boolean   @default(false)
  users             User[]    @relation("UserPacks")
  // Relación con User (pack actual)
  current_users     User[]    @relation("UserCurrentPack")
  payments          Payment[] // Relación con los pagos asociados al pack
}

model Reservation {
  id               Int       @id @default(autoincrement())
  user_id          Int
  class_id         Int
  status           String // "pending", "confirmed", "cancelled"
  created_at       DateTime  @default(now())
  reservation_date DateTime?

  user          User          @relation(fields: [user_id], references: [id])
  classSchedule ClassSchedule @relation(fields: [class_id], references: [id])
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String?       @unique @default(cuid())
  email                String        @unique
  password             String?
  googleId             String?       @unique // ID único de Google
  firstName            String
  lastName             String
  phone                String? // ← nuevo campo para número de celular
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  packs                Pack[]        @relation("UserPacks")
  current_pack_id      Int?
  current_pack         Pack?         @relation("UserCurrentPack", fields: [current_pack_id], references: [id])
  classes_remaining    Int           @default(0)
  pack_date            DateTime?
  pack_expiration_date DateTime?
  last_class_reset     DateTime?
  payments             Payment[]
  reservations         Reservation[]
  isActive             Boolean       @default(true)
  role                 Role          @default(User)
  userAudits           UserAudit[]

  // Índices para búsquedas rápidas
  @@index([email])
  @@index([googleId])
}

model UserAudit {
  audit_id    Int      @id @default(autoincrement())
  user_id     Int
  action      String
  action_date DateTime @default(now()) @db.DateTime(3)
  ip_address  String?
  details     String?

  user User @relation(fields: [user_id], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int // ID del usuario que realizó el pago
  packId        Int // ID del pack comprado
  amount        Float // Monto pagado (en pesos argentinos)
  status        String // Estado del pago: "pending", "success", "failed"
  mercadoPagoId String?  @unique // ID de la transacción en MercadoPago
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  pack Pack @relation(fields: [packId], references: [id])

  // Índices para búsquedas rápidas
  @@index([userId])
  @@index([packId])
  @@index([mercadoPagoId])
}

enum Role {
  Admin
  User
  Instructor
}
